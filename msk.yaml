Parameters:
  VPCCidrBlock:
    Type: String
    Description: "CIDR block of the VPC.  A /16 is the largest permitted."
    Default: "10.128.0.0/16"
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  BastionInstanceType:
    Type: String
    Default: t3.small
Resources:
  MSKSecretManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      KmsKeyId: !Ref SecretsManagerKMSKey
      Name: AmazonMSK_Secret01
      SecretString: |
        {
          "username": "alice",
          "password": "alice-secret"
        } 
  SecretsManagerKMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeySpec: SYMMETRIC_DEFAULT
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/Admin'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/Admin'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/Admin'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt BastionInstanceRole.Arn
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonMSKFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSCertificateManagerPrivateCAFullAccess
  InitializeACMPCALambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 180
      MemorySize: 128
      Handler: index.lambda_handler
      Runtime: python3.9
      Code:
        ZipFile: |
          import json
          import http.client
          import boto3
          import time

          def send_response(status, message, event):
              msg = {
                  'Status': status,
                  'Reason': message,
                  'PhysicalResourceId': event['LogicalResourceId']+'001',
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
              }
              presigned = event['ResponseURL']
              splits = presigned.split("/")
              server = splits[2]
              parms = "/".join(splits[3:])
              parms = "/"+parms
              print("Response Server: "+server)
              print("Response parameters: "+parms)
              print("Response message: "+json.dumps(msg))
              msgStr = json.dumps(msg)
              headers = {"Content-Type": "", "Content-Length": len(msgStr)}
              connection = http.client.HTTPSConnection(server)
              connection.request("PUT", parms,body=msgStr,headers=headers)
              response = connection.getresponse()
              print("S3 status response: {} reason: {}".format(response.status, response.reason))


          def lambda_handler(event, context):
              acmpca = boto3.client("acm-pca")
              csrResponse = acmpca.get_certificate_authority_csr(CertificateAuthorityArn=event['ResourceProperties']['CertificateAuthorityArn'])
              csrString = csrResponse['Csr']
              print(csrString)
              csrBytes = csrString.encode('utf-8')

              certIssueResponse = acmpca.issue_certificate(
                  CertificateAuthorityArn=event['ResourceProperties']['CertificateAuthorityArn'],
                  Csr=csrBytes,
                  SigningAlgorithm="SHA256WITHRSA",
                  TemplateArn="arn:aws:acm-pca:::template/RootCACertificate/V1",
                  Validity= {"Type": "DAYS", "Value": 90}
              )

              certArn = certIssueResponse['CertificateArn']
              print("Issued Certificate Arn: {}".format(certArn))

              notDone = True
              while(notDone):
                  try:
                      certResponse = acmpca.get_certificate(
                          CertificateAuthorityArn=event['ResourceProperties']['CertificateAuthorityArn'],
                          CertificateArn=certArn
                      )
                      notDone = False
                  except acmpca.exceptions.RequestInProgressException as e:
                      print("Certificate isn't ready yet. Sleeping a bit.")
                      time.sleep(10)

              print("Cert response: {}".format(certResponse))
              certString = certResponse['Certificate']
              print("Certificate: {}".format(certString))

              certBytes = certString.encode('utf-8')

              importResponse = acmpca.import_certificate_authority_certificate(
                  CertificateAuthorityArn=event['ResourceProperties']['CertificateAuthorityArn'],
                  Certificate=certBytes
              )

              print("Import response: {}".format(importResponse))
              
              send_response("SUCCESS", "Activated.", event)
  UpdateSecurityToIAMLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 512
      Handler: index.lambda_handler
      Runtime: python3.9
      Code:
        ZipFile: |
          import json
          import boto3
          import http.client

          def send_response(status, message, event):
              msg = {
                'Status': status,
                'Reason': message,
                'PhysicalResourceId': event['LogicalResourceId']+'001',
                'StackId': event['StackId'],
                'RequestId': event['RequestId'],
                'LogicalResourceId': event['LogicalResourceId'],
              }
              presigned = event['ResponseURL']
              splits = presigned.split("/")
              server = splits[2]
              parms = "/".join(splits[3:])
              parms = "/"+parms
              print("Response Server: "+server)
              print("Response parameters: "+parms)
              print("Response message: "+json.dumps(msg))
              msgStr = json.dumps(msg)
              headers = {"Content-Type": "", "Content-Length": len(msgStr)}
              connection = http.client.HTTPSConnection(server)
              connection.request("PUT", parms,body=msgStr,headers=headers)
              response = connection.getresponse()
              print("S3 status response: {} reason: {}".format(response.status, response.reason))
              
          def lambda_handler(event, context):
              print(event)
              requestType = event['RequestType']
              if requestType == 'Create':
                  try:
                      arn = event['ResourceProperties']['ClusterArn']
                      certAuthArn = event['ResourceProperties']['CertificateAuthorityArn']
              
                      msk = boto3.client("kafka")
              
                      describe = msk.describe_cluster(ClusterArn=arn)
              
                      currentVersion = describe['ClusterInfo']['CurrentVersion']
                  
                      msk.update_security(
                          CurrentVersion=currentVersion,
                          ClusterArn=arn,
                          ClientAuthentication={
                          "Tls": {
                              'CertificateAuthorityArnList': [certAuthArn],
                                  'Enabled': True,
                              }
                          }
                      )
                      send_response("SUCCESS", "Cluster security update started.", event)
                  except Exception as e:
                      print("Exception while updating cluster security")
                      print(e)
                      send_response("FAILED", "Cluster security update failed.", event)
                      
              elif requestType == 'Delete':
                  send_response("SUCCESS", "Cluster security update delete is a no-op", event)      
  UpdateSecurityToTLSLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 512
      Handler: index.lambda_handler
      Runtime: python3.9
      Code:
        ZipFile: |
          import json
          import boto3
          import http.client

          def send_response(status, message, event):
              msg = {
                'Status': status,
                'Reason': message,
                'PhysicalResourceId': event['LogicalResourceId']+'001',
                'StackId': event['StackId'],
                'RequestId': event['RequestId'],
                'LogicalResourceId': event['LogicalResourceId'],
              }
              presigned = event['ResponseURL']
              splits = presigned.split("/")
              server = splits[2]
              parms = "/".join(splits[3:])
              parms = "/"+parms
              print("Response Server: "+server)
              print("Response parameters: "+parms)
              print("Response message: "+json.dumps(msg))
              msgStr = json.dumps(msg)
              headers = {"Content-Type": "", "Content-Length": len(msgStr)}
              connection = http.client.HTTPSConnection(server)
              connection.request("PUT", parms,body=msgStr,headers=headers)
              response = connection.getresponse()
              print("S3 status response: {} reason: {}".format(response.status, response.reason))

              
              
          def lambda_handler(event, context):
              print(event)
              requestType = event['RequestType']
              if requestType == 'Create':
                  try:
                      arn = event['ResourceProperties']['ClusterArn']
                      certAuthArn = event['ResourceProperties']['CertificateAuthorityArn']
              
                      msk = boto3.client("kafka")
              
                      describe = msk.describe_cluster(ClusterArn=arn)
              
                      currentVersion = describe['ClusterInfo']['CurrentVersion']
                  
                      msk.update_security(
                          CurrentVersion=currentVersion,
                          ClusterArn=arn,
                          ClientAuthentication={
                          "Tls": {
                              'CertificateAuthorityArnList': [certAuthArn],
                                  'Enabled': True,
                              }
                          }
                      )
                      send_response("SUCCESS", "Cluster security update started.", event)
                  except Exception as e:
                      print("Exception while updating cluster security")
                      print(e)
                      send_response("FAILED", "Cluster security update failed.", event)
                      
              elif requestType == 'Delete':
                  send_response("SUCCESS", "Cluster security update delete is a no-op", event)            
  UpdateACMPCAIssueCertificate:
    Type: Custom::InitializeACMPCALambda
    DependsOn: CertificateAuthority
    Properties:
      ServiceToken: !GetAtt InitializeACMPCALambda.Arn
      Region: !Ref AWS::Region
      CertificateAuthorityArn: !GetAtt CertificateAuthority.Arn      
#  UpdateMSK02ToTlsAuthentication:
#    Type: Custom::UpdateSecurityToTLSLambda
#    DependsOn: 
#      - UpdateACMPCAIssueCertificate
#      - MSKCluster02
#    Properties:
#      ServiceToken: !GetAtt UpdateSecurityToTLSLambda.Arn
#      Region: !Ref AWS::Region
#      ClusterArn: !Ref MSKCluster02
#      CertificateAuthorityArn: !GetAtt CertificateAuthority.Arn
  CertificateAuthority:
    Type: AWS::ACMPCA::CertificateAuthority
    Properties:
      Type: ROOT
      KeyAlgorithm: RSA_2048
      SigningAlgorithm: SHA256WITHRSA
      Subject:
        Organization: "AWSDemoWorkshops"
        OrganizationalUnit: "Workshops"
  MSKCluster01:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: MSK-Demo01
      KafkaVersion: "2.2.1"
      NumberOfBrokerNodes: 3
      BrokerNodeGroupInfo:
        ClientSubnets:
         - !Ref PrivateSubnetA
         - !Ref PrivateSubnetB
         - !Ref PrivateSubnetC
        InstanceType: "kafka.t3.small"
        SecurityGroups: 
         - !Ref MSKSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 80
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: True
      ClientAuthentication:
        Unauthenticated:
          Enabled: True
  MSKCluster02:
    Type: AWS::MSK::Cluster
    DependsOn: UpdateACMPCAIssueCertificate
    Properties:
      ClusterName: MSK-Demo02
      KafkaVersion: "2.2.1"
      NumberOfBrokerNodes: 3
      BrokerNodeGroupInfo:
        ClientSubnets:
         - !Ref PrivateSubnetA
         - !Ref PrivateSubnetB
         - !Ref PrivateSubnetC
        InstanceType: "kafka.t3.small"
        SecurityGroups: 
         - !Ref MSKSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 80
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: True
      ClientAuthentication:
        Tls:
          CertificateAuthorityArnList:
            - !GetAtt CertificateAuthority.Arn
          Enabled: True
  MSKCluster03:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: MSK-Demo03
      KafkaVersion: "2.2.1"
      NumberOfBrokerNodes: 3
      BrokerNodeGroupInfo:
        ClientSubnets:
         - !Ref PrivateSubnetA
         - !Ref PrivateSubnetB
         - !Ref PrivateSubnetC
        InstanceType: "kafka.t3.small"
        SecurityGroups: 
         - !Ref MSKSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 80
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: True
      ClientAuthentication:
        Sasl:
          Scram:
            Enabled: True
  MSKCluster04:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: MSK-Demo04
      KafkaVersion: "2.2.1"
      NumberOfBrokerNodes: 3
      BrokerNodeGroupInfo:
        ClientSubnets:
         - !Ref PrivateSubnetA
         - !Ref PrivateSubnetB
         - !Ref PrivateSubnetC
        InstanceType: "kafka.t3.small"
        SecurityGroups: 
         - !Ref MSKSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 80
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: True
      ClientAuthentication:
        Sasl:
          Iam:
            Enabled: True
  PrivateBastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PrivateSubnetA
      IamInstanceProfile: !Ref BastionInstanceProfile 
      InstanceType: !Ref BastionInstanceType
      SecurityGroupIds: 
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: MSK-Auth-Bastion
      UserData:
        Fn::Base64: 
          !Sub 
            - |
              #!/bin/bash -xe
              yum -y install java-11-amazon-corretto-headless
              wget https://archive.apache.org/dist/kafka/2.2.1/kafka_2.12-2.2.1.tgz
              tar -xvf kafka_2.12-2.2.1.tgz
              mv kafka_2.12-2.2.1 /opt/
              yum -y erase awscli
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              echo export PATH=${!PATH}:/opt/kafka_2.12-2.2.1/bin >> /opt/kafka_2.12-2.2.1/msk.env
              echo export MSK01_ARN=${MSK01ARN} >> /opt/kafka_2.12-2.2.1/msk.env
              echo -E export MSK01_BOOTSTRAP=`aws kafka get-bootstrap-brokers --cluster-arn ${MSK01ARN} --query BootstrapBrokerStringTls --region ${AWS::Region}` >> /opt/kafka_2.12-2.2.1/msk.env
              echo -E export MSK01_ZOOKEEPER=`aws kafka describe-cluster --cluster-arn ${MSK01ARN} --region ${AWS::Region} --query ClusterInfo.ZookeeperConnectString` >> /opt/kafka_2.12-2.2.1/msk.env
              echo export MSK02_ARN=${MSK02ARN} >> /opt/kafka_2.12-2.2.1/msk.env
              echo -E export MSK02_BOOTSTRAP=`aws kafka get-bootstrap-brokers --cluster-arn ${MSK02ARN} --query BootstrapBrokerStringTls --region ${AWS::Region}` >> /opt/kafka_2.12-2.2.1/msk.env
              echo -E export MSK02_ZOOKEEPER=`aws kafka describe-cluster --cluster-arn ${MSK02ARN} --region ${AWS::Region} --query ClusterInfo.ZookeeperConnectString` >> /opt/kafka_2.12-2.2.1/msk.env
              echo export MSK03_ARN=${MSK03ARN} >> /opt/kafka_2.12-2.2.1/msk.env
              echo -E export MSK03_BOOTSTRAP=`aws kafka get-bootstrap-brokers --cluster-arn ${MSK03ARN} --query BootstrapBrokerStringSaslScram --region ${AWS::Region}` >> /opt/kafka_2.12-2.2.1/msk.env
              echo -E export MSK03_ZOOKEEPER=`aws kafka describe-cluster --cluster-arn ${MSK03ARN} --region ${AWS::Region} --query ClusterInfo.ZookeeperConnectString` >> /opt/kafka_2.12-2.2.1/msk.env
              echo export MSK04_ARN=${MSK04ARN} >> /opt/kafka_2.12-2.2.1/msk.env
              echo -E export MSK04_BOOTSTRAP=`aws kafka get-bootstrap-brokers --cluster-arn ${MSK04ARN} --query BootstrapBrokerStringSaslIam --region ${AWS::Region}` >> /opt/kafka_2.12-2.2.1/msk.env
              echo -E export MSK04_ZOOKEEPER=`aws kafka describe-cluster --cluster-arn ${MSK04ARN} --region ${AWS::Region} --query ClusterInfo.ZookeeperConnectString` >> /opt/kafka_2.12-2.2.1/msk.env
              chmod 444 /opt/kafka_2.12-2.2.1/msk.env
            - MSK01ARN: !Ref MSKCluster01
              MSK02ARN: !Ref MSKCluster02 
              MSK03ARN: !Ref MSKCluster03
              MSK04ARN: !Ref MSKCluster04
  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "MSKSecurityGroup"
      GroupDescription: "MSK Security Group"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: "tcp"
          FromPort: 9092
          ToPort: 9092
          Description: "Plaintext broker connections"
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: "tcp"
          FromPort: 9094
          ToPort: 9094
          Description: "TLS broker connections"
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: "tcp"
          FromPort: 9096
          ToPort: 9096
          Description: "Plaintext broker connections"
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: "tcp"
          FromPort: 9098
          ToPort: 9098
          Description: "IAM broker connections"
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: "tcp"
          FromPort: 2181
          ToPort: 2181
          Description: "Zookeeper default"
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: "tcp"
          FromPort: 2182
          ToPort: 2182
          Description: "Zookeeper TLS"
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "BastionSecurityGroup"
      GroupDescription: "Bastion Security Group"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - "CidrIp": "0.0.0.0/0"
          "IpProtocol": "tcp"
          "FromPort": 0
          "ToPort": 65535
  BastionInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
        - !Ref BastionInstanceRole
  BastionInstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        # The managed IAM policy AmazonSSMManagedInstanceCore grants access to Session Manager
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Ref BastionInstancePolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonMSKFullAccess
  BastionInstancePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: MSK Admin Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - 'kafka:*'
              - "acm-pca:GetCertificateAuthorityCertificate"
              - "acm-pca:ListCertificateAuthorities"
              - "acm-pca:IssueCertificate"
              - "acm-pca:GetCertificate"
              - "secretsmanager:ListSecrets"
            Resource: '*'
          -
            Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
              - "secretsmanager:DescribeSecret"
            Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:AmazonMSK_*'
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: "default"
      CidrBlock:
        Ref: VPCCidrBlock
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC 
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Join ["",[!Ref "AWS::Region","a"]]
      CidrBlock: !Select [0,!Cidr [Ref: VPCCidrBlock,6,8]]
      Tags:
        - Key: "Name"
          Value: "public-subnet-a"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Join ["",[!Ref "AWS::Region","b"]]
      CidrBlock: !Select [1,!Cidr [Ref: VPCCidrBlock,6,8]] 
      Tags:
        - Key: "Name"
          Value: "public-subnet-b" 
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Join ["",[!Ref "AWS::Region","c"]]
      CidrBlock: !Select [2,!Cidr [Ref: VPCCidrBlock,6,8]]  
      Tags:
        - Key: "Name"
          Value: "public-subnet-c"
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Join ["",[!Ref "AWS::Region","a"]]
      CidrBlock: !Select [3,!Cidr [Ref: VPCCidrBlock,6,8]]
      Tags:
        - Key: "Name"
          Value: "private-subnet-a"
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Join ["",[!Ref "AWS::Region","b"]]
      CidrBlock: !Select [4,!Cidr [Ref: VPCCidrBlock,6,8]] 
      Tags:
        - Key: "Name"
          Value: "private-subnet-b"
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Join ["",[!Ref "AWS::Region","c"]]
      CidrBlock: !Select [5,!Cidr [Ref: VPCCidrBlock,6,8]]
      Tags:
        - Key: "Name"
          Value: "private-subnet-c"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTableA
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTableB
  PublicRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTableC
  NATEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"
    DependsOn: VPC
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      AllocationId: !GetAtt NATEIPA.AllocationId
    DependsOn: NATEIPA
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: NATGateway
      RouteTableId:
        Ref: PrivateRouteTableA
  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: NATGateway
      RouteTableId:
        Ref: PrivateRouteTableB
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: NATGateway
      RouteTableId:
        Ref: PrivateRouteTableC
  PrivateRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA
  PrivateRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB
  PrivateRouteTableCAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC
  PublicRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
  PublicRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB
  PublicRouteTableCAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableC
      SubnetId: !Ref PublicSubnetC
Outputs:
  Vpc:
    Description: "The ID of the VPC"
    Value:
      Ref: VPC
    Export:
      Name: VpcId
  PrivateSubnetA:
    Description: "Private Subnet A"
    Value:
      Ref: PrivateSubnetA
    Export:
      Name: PrivateSubnetAId
  PrivateSubnetB:
    Description: "Private Subnet B"
    Value:
      Ref: PrivateSubnetB
    Export:
      Name: PrivateSubnetBId
  PrivateSubnetC:
    Description: "Private Subnet C"
    Value:
      Ref: PrivateSubnetC
    Export:
      Name: PrivateSubnetCId
  PublicSubnetA:
    Description: "Public Subnet A"
    Value:
      Ref: PublicSubnetA
    Export:
      Name: PublicSubnetAId
  PublicSubnetB:
    Description: "Public Subnet B"
    Value:
      Ref: PublicSubnetB
    Export:
      Name: PublicSubnetBId
  PublicSubnetC:
    Description: "Public Subnet C"
    Value:
      Ref: PublicSubnetC
    Export:
      Name: PublicSubnetCId
